buildscript {
  repositories { mavenCentral() }
  dependencies { classpath("org.flywaydb:flyway-database-postgresql:10.1.0") }
}

plugins {
  id 'application'
  id 'org.springframework.boot' version '3.3.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id "org.sonarqube" version "4.4.1.3373"
  id "com.diffplug.spotless" version "6.19.0"
  id "org.flywaydb.flyway" version "10.1.0"
  id 'java'
  id 'jacoco'
}


group = 'dev.findfirst'
version = '1.0.0'

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

spotless {
  // optional: limit format enforcement to just the files changed by this feature branch
  //ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'
    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
    encoding 'UTF-8'
  }

  java {
    // optional: you can specify import groups directly
    // note: you can use an empty string for all the imports you didn't specify explicitly, and '\\#` prefix for static imports
    importOrder('java', 'jakarta', 'dev.findfirst')
    // optional: instead of specifying import groups directly you can specify a config file
    // export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder

    removeUnusedImports()

    // Choose one of these formatters.
    eclipse().configFile("eclipse-java-google-style.xml")

    formatAnnotations()  // fixes formatting of type annotations, see below

    //licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
  }
}

tasks.named("build") {
  dependsOn("spotlessApply")
}

tasks.named("bootRun") {
dependsOn('flywayMigrate')
}

repositories {
  mavenCentral()
}

dependencies {
  compileOnly 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-data-rest:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-security:3.2.0'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:3.1.6'
  implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.0'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
  implementation 'org.jsoup:jsoup:1.17.2'
  implementation 'org.flywaydb:flyway-core:10.17.1'
  // https://mvnrepository.com/artifact/org.springframework.data/spring-data-jdbc
  implementation 'org.springframework.data:spring-data-jdbc:3.3.4'
  implementation group: 'com.github.crawler-commons', name: 'crawler-commons', version: '1.4'

  runtimeOnly "org.flywaydb:flyway-database-postgresql:10.1.0"
  runtimeOnly 'org.postgresql:postgresql:42.7.3'
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

  annotationProcessor 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'

  testCompileOnly 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
  testImplementation 'org.springframework.security:spring-security-test:6.2.0'
  testImplementation 'org.testcontainers:postgresql'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation "org.testcontainers:junit-jupiter:1.19.3"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'

  developmentOnly("org.springframework.boot:spring-boot-devtools")
}

application {
  mainClass = 'dev.findfirst.FindFirstApplication'
}

test {
  systemProperty 'spring.profiles.active', 'integration'
  useJUnitPlatform()
  testLogging.showStandardStreams = true
  finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
  reports {
    xml.required = true
    csv.required = true
    xml.destination = file("$buildDir/reports/coverage.xml")
  }
}

sonar {
  properties {
    property "sonar.projectKey", "findfirst_server"
    property "sonar.organization", "findfirst"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.gradle.skipCompile", "true"
  }
}

flyway {
  // Get the system property or use the default, i.e. development defaults.
  url = System.getProperty("SPRING_DATASOURCE_URL", "jdbc:postgresql://localhost:5432/findfirst")
  user = System.getProperty("POSTGRES_USER", "postgres")
  password = System.getProperty("POSTGRES_PASSWORD", "admin")
  driver = "org.postgresql.Driver"
  locations = ["classpath:db/migration"]
  // Ideally we should not do this.
  cleanDisabled = true
}


flywayMigrate.dependsOn classes
